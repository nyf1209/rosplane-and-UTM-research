# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rosplane_msgs/Waypoint.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Waypoint(genpy.Message):
  _md5sum = "6f0d6b83780495e80e302dd0005e1bee"
  _type = "rosplane_msgs/Waypoint"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# New waypoint, input to path manager

# @warning w and Va_d always have to be valid; the chi_d is optional.
float32[3] w		# Waypoint in local NED (m)
float32 chi_d		# Desired course at this waypoint (rad)
bool chi_valid		# Desired course valid (dubin or fillet paths)
float32 Va_d		# Desired airspeed (m/s)
bool set_current	# Sets this waypoint to be executed now! Starts a new list
bool clear_wp_list  # Removes all waypoints and returns to origin.  The rest of
                    # this message will be ignored
"""
  __slots__ = ['w','chi_d','chi_valid','Va_d','set_current','clear_wp_list']
  _slot_types = ['float32[3]','float32','bool','float32','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       w,chi_d,chi_valid,Va_d,set_current,clear_wp_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Waypoint, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.w is None:
        self.w = [0.] * 3
      if self.chi_d is None:
        self.chi_d = 0.
      if self.chi_valid is None:
        self.chi_valid = False
      if self.Va_d is None:
        self.Va_d = 0.
      if self.set_current is None:
        self.set_current = False
      if self.clear_wp_list is None:
        self.clear_wp_list = False
    else:
      self.w = [0.] * 3
      self.chi_d = 0.
      self.chi_valid = False
      self.Va_d = 0.
      self.set_current = False
      self.clear_wp_list = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_3f().pack(*self.w))
      _x = self
      buff.write(_get_struct_fBf2B().pack(_x.chi_d, _x.chi_valid, _x.Va_d, _x.set_current, _x.clear_wp_list))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 12
      self.w = _get_struct_3f().unpack(str[start:end])
      _x = self
      start = end
      end += 11
      (_x.chi_d, _x.chi_valid, _x.Va_d, _x.set_current, _x.clear_wp_list,) = _get_struct_fBf2B().unpack(str[start:end])
      self.chi_valid = bool(self.chi_valid)
      self.set_current = bool(self.set_current)
      self.clear_wp_list = bool(self.clear_wp_list)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.w.tostring())
      _x = self
      buff.write(_get_struct_fBf2B().pack(_x.chi_d, _x.chi_valid, _x.Va_d, _x.set_current, _x.clear_wp_list))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 12
      self.w = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      _x = self
      start = end
      end += 11
      (_x.chi_d, _x.chi_valid, _x.Va_d, _x.set_current, _x.clear_wp_list,) = _get_struct_fBf2B().unpack(str[start:end])
      self.chi_valid = bool(self.chi_valid)
      self.set_current = bool(self.set_current)
      self.clear_wp_list = bool(self.clear_wp_list)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_fBf2B = None
def _get_struct_fBf2B():
    global _struct_fBf2B
    if _struct_fBf2B is None:
        _struct_fBf2B = struct.Struct("<fBf2B")
    return _struct_fBf2B
