# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rosplane_msgs/State.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class State(genpy.Message):
  _md5sum = "57224b7ced1a3b169bed04d7cbeefdfe"
  _type = "rosplane_msgs/State"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# Vehicle state 'x_hat' output from the estimator or from simulator 

Header header

# Original States
# @warning roll, pitch and yaw have always to be valid, the quaternion is optional
float32[3] position	# north, east, down (m)
float32 Va		# Airspeed (m/s)
float32 alpha		# Angle of attack (rad)
float32 beta		# Slide slip angle (rad)
float32 phi		# Roll angle (rad)
float32 theta		# Pitch angle (rad)
float32 psi		# Yaw angle (rad)
float32 chi		# Course angle (rad)
float32 p		# Body frame rollrate (rad/s)
float32 q		# Body frame pitchrate (rad/s)
float32 r		# Body frame yawrate (rad/s)
float32 Vg		# Groundspeed (m/s)
float32 wn		# Windspeed north component (m/s)
float32 we		# Windspeed east component (m/s)

# Additional States for convenience
float32[4] quat		# Quaternion (wxyz, NED)
bool quat_valid		# Quaternion valid
float32 chi_deg		# Wrapped course angle (deg)
float32 psi_deg		# Wrapped yaw angle (deg)
float32 initial_lat 	# Initial/origin latitude (lat. deg)
float32 initial_lon 	# Initial/origin longitude (lon. deg) 
float32 initial_alt 	# Initial/origin altitude (m) 

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','position','Va','alpha','beta','phi','theta','psi','chi','p','q','r','Vg','wn','we','quat','quat_valid','chi_deg','psi_deg','initial_lat','initial_lon','initial_alt']
  _slot_types = ['std_msgs/Header','float32[3]','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32[4]','bool','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,position,Va,alpha,beta,phi,theta,psi,chi,p,q,r,Vg,wn,we,quat,quat_valid,chi_deg,psi_deg,initial_lat,initial_lon,initial_alt

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(State, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position is None:
        self.position = [0.] * 3
      if self.Va is None:
        self.Va = 0.
      if self.alpha is None:
        self.alpha = 0.
      if self.beta is None:
        self.beta = 0.
      if self.phi is None:
        self.phi = 0.
      if self.theta is None:
        self.theta = 0.
      if self.psi is None:
        self.psi = 0.
      if self.chi is None:
        self.chi = 0.
      if self.p is None:
        self.p = 0.
      if self.q is None:
        self.q = 0.
      if self.r is None:
        self.r = 0.
      if self.Vg is None:
        self.Vg = 0.
      if self.wn is None:
        self.wn = 0.
      if self.we is None:
        self.we = 0.
      if self.quat is None:
        self.quat = [0.] * 4
      if self.quat_valid is None:
        self.quat_valid = False
      if self.chi_deg is None:
        self.chi_deg = 0.
      if self.psi_deg is None:
        self.psi_deg = 0.
      if self.initial_lat is None:
        self.initial_lat = 0.
      if self.initial_lon is None:
        self.initial_lon = 0.
      if self.initial_alt is None:
        self.initial_alt = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.position = [0.] * 3
      self.Va = 0.
      self.alpha = 0.
      self.beta = 0.
      self.phi = 0.
      self.theta = 0.
      self.psi = 0.
      self.chi = 0.
      self.p = 0.
      self.q = 0.
      self.r = 0.
      self.Vg = 0.
      self.wn = 0.
      self.we = 0.
      self.quat = [0.] * 4
      self.quat_valid = False
      self.chi_deg = 0.
      self.psi_deg = 0.
      self.initial_lat = 0.
      self.initial_lon = 0.
      self.initial_alt = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(_get_struct_3f().pack(*self.position))
      _x = self
      buff.write(_get_struct_13f().pack(_x.Va, _x.alpha, _x.beta, _x.phi, _x.theta, _x.psi, _x.chi, _x.p, _x.q, _x.r, _x.Vg, _x.wn, _x.we))
      buff.write(_get_struct_4f().pack(*self.quat))
      _x = self
      buff.write(_get_struct_B5f().pack(_x.quat_valid, _x.chi_deg, _x.psi_deg, _x.initial_lat, _x.initial_lon, _x.initial_alt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 12
      self.position = _get_struct_3f().unpack(str[start:end])
      _x = self
      start = end
      end += 52
      (_x.Va, _x.alpha, _x.beta, _x.phi, _x.theta, _x.psi, _x.chi, _x.p, _x.q, _x.r, _x.Vg, _x.wn, _x.we,) = _get_struct_13f().unpack(str[start:end])
      start = end
      end += 16
      self.quat = _get_struct_4f().unpack(str[start:end])
      _x = self
      start = end
      end += 21
      (_x.quat_valid, _x.chi_deg, _x.psi_deg, _x.initial_lat, _x.initial_lon, _x.initial_alt,) = _get_struct_B5f().unpack(str[start:end])
      self.quat_valid = bool(self.quat_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(self.position.tostring())
      _x = self
      buff.write(_get_struct_13f().pack(_x.Va, _x.alpha, _x.beta, _x.phi, _x.theta, _x.psi, _x.chi, _x.p, _x.q, _x.r, _x.Vg, _x.wn, _x.we))
      buff.write(self.quat.tostring())
      _x = self
      buff.write(_get_struct_B5f().pack(_x.quat_valid, _x.chi_deg, _x.psi_deg, _x.initial_lat, _x.initial_lon, _x.initial_alt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 12
      self.position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      _x = self
      start = end
      end += 52
      (_x.Va, _x.alpha, _x.beta, _x.phi, _x.theta, _x.psi, _x.chi, _x.p, _x.q, _x.r, _x.Vg, _x.wn, _x.we,) = _get_struct_13f().unpack(str[start:end])
      start = end
      end += 16
      self.quat = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      _x = self
      start = end
      end += 21
      (_x.quat_valid, _x.chi_deg, _x.psi_deg, _x.initial_lat, _x.initial_lon, _x.initial_alt,) = _get_struct_B5f().unpack(str[start:end])
      self.quat_valid = bool(self.quat_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13f = None
def _get_struct_13f():
    global _struct_13f
    if _struct_13f is None:
        _struct_13f = struct.Struct("<13f")
    return _struct_13f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_B5f = None
def _get_struct_B5f():
    global _struct_B5f
    if _struct_B5f is None:
        _struct_B5f = struct.Struct("<B5f")
    return _struct_B5f
