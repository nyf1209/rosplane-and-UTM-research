# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cym_marker/Marker.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import cym_marker.msg
import genpy
import geometry_msgs.msg
import std_msgs.msg

class Marker(genpy.Message):
  _md5sum = "dab7fc5ca8dac20902761a1abdbd2b29"
  _type = "cym_marker/Marker"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# Marker type
uint8 NONE=0
uint8 BOX=1
uint8 CYLINDER=2
uint8 LINE_LIST=4
uint8 LINE_STRIP=3
uint8 POINTS=5
uint8 SPHERE=6
uint8 TEXT=7
uint8 TRIANGLE_FAN=8
uint8 TRIANGLE_LIST=9
uint8 TRIANGLE_STRIP=10

# Visilibity defines what cameras render the marker.
uint8 GUI=0  # Only cameras for user interaction render the visual.
uint8 ALL=1   # All cameras including camera sensors render the visual.

# Marker action
uint8 ADD_MODIFY=0
uint8 DELETE_MARKER=1
uint8 DELETE_ALL=2

Header header
uint8 action
string ns
uint64 id
int32 layer
uint8 type
duration lifetime
geometry_msgs/Pose pose
geometry_msgs/Vector3 scale
Material material

# Relevant Type: LINE_STRIP, LINE_LIST, POINTS, TRIANGLE_FAN, TRIANGLE_LIST,
#                TRIANGLE_STRIP
geometry_msgs/Point[] point

# Relevant Type: TEXT
string text

string parent

uint8 visibility


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: cym_marker/Material
# Material shader type
uint8 VERTEX=1
uint8 PIXEL=2
uint8 NORMAL_MAP_OBJECT_SPACE=3
uint8 NORMAL_MAP_TANGENT_SPACE=4

Header header

Script script
uint8 shader_type
string normal_map
std_msgs/ColorRGBA ambient
std_msgs/ColorRGBA diffuse
std_msgs/ColorRGBA specular
std_msgs/ColorRGBA emissive
bool lighting


================================================================================
MSG: cym_marker/Script
string[] uri
string name


================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a
"""
  # Pseudo-constants
  NONE = 0
  BOX = 1
  CYLINDER = 2
  LINE_LIST = 4
  LINE_STRIP = 3
  POINTS = 5
  SPHERE = 6
  TEXT = 7
  TRIANGLE_FAN = 8
  TRIANGLE_LIST = 9
  TRIANGLE_STRIP = 10
  GUI = 0
  ALL = 1
  ADD_MODIFY = 0
  DELETE_MARKER = 1
  DELETE_ALL = 2

  __slots__ = ['header','action','ns','id','layer','type','lifetime','pose','scale','material','point','text','parent','visibility']
  _slot_types = ['std_msgs/Header','uint8','string','uint64','int32','uint8','duration','geometry_msgs/Pose','geometry_msgs/Vector3','cym_marker/Material','geometry_msgs/Point[]','string','string','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,action,ns,id,layer,type,lifetime,pose,scale,material,point,text,parent,visibility

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Marker, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.action is None:
        self.action = 0
      if self.ns is None:
        self.ns = ''
      if self.id is None:
        self.id = 0
      if self.layer is None:
        self.layer = 0
      if self.type is None:
        self.type = 0
      if self.lifetime is None:
        self.lifetime = genpy.Duration()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.scale is None:
        self.scale = geometry_msgs.msg.Vector3()
      if self.material is None:
        self.material = cym_marker.msg.Material()
      if self.point is None:
        self.point = []
      if self.text is None:
        self.text = ''
      if self.parent is None:
        self.parent = ''
      if self.visibility is None:
        self.visibility = 0
    else:
      self.header = std_msgs.msg.Header()
      self.action = 0
      self.ns = ''
      self.id = 0
      self.layer = 0
      self.type = 0
      self.lifetime = genpy.Duration()
      self.pose = geometry_msgs.msg.Pose()
      self.scale = geometry_msgs.msg.Vector3()
      self.material = cym_marker.msg.Material()
      self.point = []
      self.text = ''
      self.parent = ''
      self.visibility = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action
      buff.write(_get_struct_B().pack(_x))
      _x = self.ns
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_QiB2i10d3I().pack(_x.id, _x.layer, _x.type, _x.lifetime.secs, _x.lifetime.nsecs, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.scale.x, _x.scale.y, _x.scale.z, _x.material.header.seq, _x.material.header.stamp.secs, _x.material.header.stamp.nsecs))
      _x = self.material.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.material.script.uri)
      buff.write(_struct_I.pack(length))
      for val1 in self.material.script.uri:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.material.script.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.material.shader_type
      buff.write(_get_struct_B().pack(_x))
      _x = self.material.normal_map
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_16fB().pack(_x.material.ambient.r, _x.material.ambient.g, _x.material.ambient.b, _x.material.ambient.a, _x.material.diffuse.r, _x.material.diffuse.g, _x.material.diffuse.b, _x.material.diffuse.a, _x.material.specular.r, _x.material.specular.g, _x.material.specular.b, _x.material.specular.a, _x.material.emissive.r, _x.material.emissive.g, _x.material.emissive.b, _x.material.emissive.a, _x.material.lighting))
      length = len(self.point)
      buff.write(_struct_I.pack(length))
      for val1 in self.point:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.parent
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.visibility
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lifetime is None:
        self.lifetime = genpy.Duration()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.scale is None:
        self.scale = geometry_msgs.msg.Vector3()
      if self.material is None:
        self.material = cym_marker.msg.Material()
      if self.point is None:
        self.point = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.action,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ns = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ns = str[start:end]
      _x = self
      start = end
      end += 113
      (_x.id, _x.layer, _x.type, _x.lifetime.secs, _x.lifetime.nsecs, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.scale.x, _x.scale.y, _x.scale.z, _x.material.header.seq, _x.material.header.stamp.secs, _x.material.header.stamp.nsecs,) = _get_struct_QiB2i10d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.material.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.material.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.material.script.uri = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.material.script.uri.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.material.script.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.material.script.name = str[start:end]
      start = end
      end += 1
      (self.material.shader_type,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.material.normal_map = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.material.normal_map = str[start:end]
      _x = self
      start = end
      end += 65
      (_x.material.ambient.r, _x.material.ambient.g, _x.material.ambient.b, _x.material.ambient.a, _x.material.diffuse.r, _x.material.diffuse.g, _x.material.diffuse.b, _x.material.diffuse.a, _x.material.specular.r, _x.material.specular.g, _x.material.specular.b, _x.material.specular.a, _x.material.emissive.r, _x.material.emissive.g, _x.material.emissive.b, _x.material.emissive.a, _x.material.lighting,) = _get_struct_16fB().unpack(str[start:end])
      self.material.lighting = bool(self.material.lighting)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.point = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.point.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.parent = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.parent = str[start:end]
      start = end
      end += 1
      (self.visibility,) = _get_struct_B().unpack(str[start:end])
      self.lifetime.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action
      buff.write(_get_struct_B().pack(_x))
      _x = self.ns
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_QiB2i10d3I().pack(_x.id, _x.layer, _x.type, _x.lifetime.secs, _x.lifetime.nsecs, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.scale.x, _x.scale.y, _x.scale.z, _x.material.header.seq, _x.material.header.stamp.secs, _x.material.header.stamp.nsecs))
      _x = self.material.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.material.script.uri)
      buff.write(_struct_I.pack(length))
      for val1 in self.material.script.uri:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.material.script.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.material.shader_type
      buff.write(_get_struct_B().pack(_x))
      _x = self.material.normal_map
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_16fB().pack(_x.material.ambient.r, _x.material.ambient.g, _x.material.ambient.b, _x.material.ambient.a, _x.material.diffuse.r, _x.material.diffuse.g, _x.material.diffuse.b, _x.material.diffuse.a, _x.material.specular.r, _x.material.specular.g, _x.material.specular.b, _x.material.specular.a, _x.material.emissive.r, _x.material.emissive.g, _x.material.emissive.b, _x.material.emissive.a, _x.material.lighting))
      length = len(self.point)
      buff.write(_struct_I.pack(length))
      for val1 in self.point:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.parent
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.visibility
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lifetime is None:
        self.lifetime = genpy.Duration()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.scale is None:
        self.scale = geometry_msgs.msg.Vector3()
      if self.material is None:
        self.material = cym_marker.msg.Material()
      if self.point is None:
        self.point = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.action,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ns = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ns = str[start:end]
      _x = self
      start = end
      end += 113
      (_x.id, _x.layer, _x.type, _x.lifetime.secs, _x.lifetime.nsecs, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.scale.x, _x.scale.y, _x.scale.z, _x.material.header.seq, _x.material.header.stamp.secs, _x.material.header.stamp.nsecs,) = _get_struct_QiB2i10d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.material.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.material.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.material.script.uri = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.material.script.uri.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.material.script.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.material.script.name = str[start:end]
      start = end
      end += 1
      (self.material.shader_type,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.material.normal_map = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.material.normal_map = str[start:end]
      _x = self
      start = end
      end += 65
      (_x.material.ambient.r, _x.material.ambient.g, _x.material.ambient.b, _x.material.ambient.a, _x.material.diffuse.r, _x.material.diffuse.g, _x.material.diffuse.b, _x.material.diffuse.a, _x.material.specular.r, _x.material.specular.g, _x.material.specular.b, _x.material.specular.a, _x.material.emissive.r, _x.material.emissive.g, _x.material.emissive.b, _x.material.emissive.a, _x.material.lighting,) = _get_struct_16fB().unpack(str[start:end])
      self.material.lighting = bool(self.material.lighting)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.point = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.point.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.parent = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.parent = str[start:end]
      start = end
      end += 1
      (self.visibility,) = _get_struct_B().unpack(str[start:end])
      self.lifetime.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16fB = None
def _get_struct_16fB():
    global _struct_16fB
    if _struct_16fB is None:
        _struct_16fB = struct.Struct("<16fB")
    return _struct_16fB
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_QiB2i10d3I = None
def _get_struct_QiB2i10d3I():
    global _struct_QiB2i10d3I
    if _struct_QiB2i10d3I is None:
        _struct_QiB2i10d3I = struct.Struct("<QiB2i10d3I")
    return _struct_QiB2i10d3I
