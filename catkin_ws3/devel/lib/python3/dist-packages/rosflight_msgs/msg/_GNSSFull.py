# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rosflight_msgs/GNSSFull.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class GNSSFull(genpy.Message):
  _md5sum = "ce3697684ed81ea92b68164c6a58e827"
  _type = "rosflight_msgs/GNSSFull"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
uint64 time_of_week
uint16 year
uint8 month
uint8 day
uint8 hour
uint8 min
uint8 sec
uint8 valid
uint32 t_acc #ns 
int32 nano #ns 
uint8 fix_type
uint8 num_sat
int32 lon #deg *10^-7 
int32 lat #deg *10^-7 
int32 height #mm above elipsoid 
int32 height_msl #mm above mean sea level 
uint32 h_acc #mm 
uint32 v_acc #mm 
int32 vel_n #mm/s 
int32 vel_e #mm/s 
int32 vel_d #mm/s 
int32 g_speed #mm/s 
int32 head_mot #deg *10^-5 
uint32 s_acc #mm/s
uint32 head_acc #deg * 10^-5 
uint16 p_dop #*.01 

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','time_of_week','year','month','day','hour','min','sec','valid','t_acc','nano','fix_type','num_sat','lon','lat','height','height_msl','h_acc','v_acc','vel_n','vel_e','vel_d','g_speed','head_mot','s_acc','head_acc','p_dop']
  _slot_types = ['std_msgs/Header','uint64','uint16','uint8','uint8','uint8','uint8','uint8','uint8','uint32','int32','uint8','uint8','int32','int32','int32','int32','uint32','uint32','int32','int32','int32','int32','int32','uint32','uint32','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,time_of_week,year,month,day,hour,min,sec,valid,t_acc,nano,fix_type,num_sat,lon,lat,height,height_msl,h_acc,v_acc,vel_n,vel_e,vel_d,g_speed,head_mot,s_acc,head_acc,p_dop

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GNSSFull, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.time_of_week is None:
        self.time_of_week = 0
      if self.year is None:
        self.year = 0
      if self.month is None:
        self.month = 0
      if self.day is None:
        self.day = 0
      if self.hour is None:
        self.hour = 0
      if self.min is None:
        self.min = 0
      if self.sec is None:
        self.sec = 0
      if self.valid is None:
        self.valid = 0
      if self.t_acc is None:
        self.t_acc = 0
      if self.nano is None:
        self.nano = 0
      if self.fix_type is None:
        self.fix_type = 0
      if self.num_sat is None:
        self.num_sat = 0
      if self.lon is None:
        self.lon = 0
      if self.lat is None:
        self.lat = 0
      if self.height is None:
        self.height = 0
      if self.height_msl is None:
        self.height_msl = 0
      if self.h_acc is None:
        self.h_acc = 0
      if self.v_acc is None:
        self.v_acc = 0
      if self.vel_n is None:
        self.vel_n = 0
      if self.vel_e is None:
        self.vel_e = 0
      if self.vel_d is None:
        self.vel_d = 0
      if self.g_speed is None:
        self.g_speed = 0
      if self.head_mot is None:
        self.head_mot = 0
      if self.s_acc is None:
        self.s_acc = 0
      if self.head_acc is None:
        self.head_acc = 0
      if self.p_dop is None:
        self.p_dop = 0
    else:
      self.header = std_msgs.msg.Header()
      self.time_of_week = 0
      self.year = 0
      self.month = 0
      self.day = 0
      self.hour = 0
      self.min = 0
      self.sec = 0
      self.valid = 0
      self.t_acc = 0
      self.nano = 0
      self.fix_type = 0
      self.num_sat = 0
      self.lon = 0
      self.lat = 0
      self.height = 0
      self.height_msl = 0
      self.h_acc = 0
      self.v_acc = 0
      self.vel_n = 0
      self.vel_e = 0
      self.vel_d = 0
      self.g_speed = 0
      self.head_mot = 0
      self.s_acc = 0
      self.head_acc = 0
      self.p_dop = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_QH6BIi2B4i2I5i2IH().pack(_x.time_of_week, _x.year, _x.month, _x.day, _x.hour, _x.min, _x.sec, _x.valid, _x.t_acc, _x.nano, _x.fix_type, _x.num_sat, _x.lon, _x.lat, _x.height, _x.height_msl, _x.h_acc, _x.v_acc, _x.vel_n, _x.vel_e, _x.vel_d, _x.g_speed, _x.head_mot, _x.s_acc, _x.head_acc, _x.p_dop))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.time_of_week, _x.year, _x.month, _x.day, _x.hour, _x.min, _x.sec, _x.valid, _x.t_acc, _x.nano, _x.fix_type, _x.num_sat, _x.lon, _x.lat, _x.height, _x.height_msl, _x.h_acc, _x.v_acc, _x.vel_n, _x.vel_e, _x.vel_d, _x.g_speed, _x.head_mot, _x.s_acc, _x.head_acc, _x.p_dop,) = _get_struct_QH6BIi2B4i2I5i2IH().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_QH6BIi2B4i2I5i2IH().pack(_x.time_of_week, _x.year, _x.month, _x.day, _x.hour, _x.min, _x.sec, _x.valid, _x.t_acc, _x.nano, _x.fix_type, _x.num_sat, _x.lon, _x.lat, _x.height, _x.height_msl, _x.h_acc, _x.v_acc, _x.vel_n, _x.vel_e, _x.vel_d, _x.g_speed, _x.head_mot, _x.s_acc, _x.head_acc, _x.p_dop))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.time_of_week, _x.year, _x.month, _x.day, _x.hour, _x.min, _x.sec, _x.valid, _x.t_acc, _x.nano, _x.fix_type, _x.num_sat, _x.lon, _x.lat, _x.height, _x.height_msl, _x.h_acc, _x.v_acc, _x.vel_n, _x.vel_e, _x.vel_d, _x.g_speed, _x.head_mot, _x.s_acc, _x.head_acc, _x.p_dop,) = _get_struct_QH6BIi2B4i2I5i2IH().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_QH6BIi2B4i2I5i2IH = None
def _get_struct_QH6BIi2B4i2I5i2IH():
    global _struct_QH6BIi2B4i2I5i2IH
    if _struct_QH6BIi2B4i2I5i2IH is None:
        _struct_QH6BIi2B4i2I5i2IH = struct.Struct("<QH6BIi2B4i2I5i2IH")
    return _struct_QH6BIi2B4i2I5i2IH
