// Generated by gencpp from file rosplane_msgs/Controller_Commands.msg
// DO NOT EDIT!


#ifndef ROSPLANE_MSGS_MESSAGE_CONTROLLER_COMMANDS_H
#define ROSPLANE_MSGS_MESSAGE_CONTROLLER_COMMANDS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rosplane_msgs
{
template <class ContainerAllocator>
struct Controller_Commands_
{
  typedef Controller_Commands_<ContainerAllocator> Type;

  Controller_Commands_()
    : Va_c(0.0)
    , h_c(0.0)
    , chi_c(0.0)
    , phi_ff(0.0)
    , aux()
    , aux_valid(false)  {
      aux.assign(0.0);
  }
  Controller_Commands_(const ContainerAllocator& _alloc)
    : Va_c(0.0)
    , h_c(0.0)
    , chi_c(0.0)
    , phi_ff(0.0)
    , aux()
    , aux_valid(false)  {
  (void)_alloc;
      aux.assign(0.0);
  }



   typedef float _Va_c_type;
  _Va_c_type Va_c;

   typedef float _h_c_type;
  _h_c_type h_c;

   typedef float _chi_c_type;
  _chi_c_type chi_c;

   typedef float _phi_ff_type;
  _phi_ff_type phi_ff;

   typedef boost::array<float, 4>  _aux_type;
  _aux_type aux;

   typedef uint8_t _aux_valid_type;
  _aux_valid_type aux_valid;





  typedef boost::shared_ptr< ::rosplane_msgs::Controller_Commands_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosplane_msgs::Controller_Commands_<ContainerAllocator> const> ConstPtr;

}; // struct Controller_Commands_

typedef ::rosplane_msgs::Controller_Commands_<std::allocator<void> > Controller_Commands;

typedef boost::shared_ptr< ::rosplane_msgs::Controller_Commands > Controller_CommandsPtr;
typedef boost::shared_ptr< ::rosplane_msgs::Controller_Commands const> Controller_CommandsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosplane_msgs::Controller_Commands_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosplane_msgs::Controller_Commands_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rosplane_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'HasHeader': False, 'IsMessage': True}
// {'rosplane_msgs': ['/home/yifengn2/catkin_ws3/src/rosplane/rosplane_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rosplane_msgs::Controller_Commands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosplane_msgs::Controller_Commands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosplane_msgs::Controller_Commands_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosplane_msgs::Controller_Commands_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosplane_msgs::Controller_Commands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosplane_msgs::Controller_Commands_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosplane_msgs::Controller_Commands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2c42df94ede980f479b78898f3ea5e29";
  }

  static const char* value(const ::rosplane_msgs::Controller_Commands_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2c42df94ede980f4ULL;
  static const uint64_t static_value2 = 0x79b78898f3ea5e29ULL;
};

template<class ContainerAllocator>
struct DataType< ::rosplane_msgs::Controller_Commands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosplane_msgs/Controller_Commands";
  }

  static const char* value(const ::rosplane_msgs::Controller_Commands_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosplane_msgs::Controller_Commands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Controller commands output from the path follower, input to autopilot controller\n\
\n\
# @warning Va_c, h_c and chi_c have always to be valid, the aux array is optional\n\
float32 Va_c		# Commanded airspeed (m/s)\n\
float32 h_c		# Commanded altitude (m)\n\
float32 chi_c		# Commanded course (rad)\n\
float32 phi_ff		# feed forward command for orbits (rad)\n\
float32[4] aux		# Optional auxiliary commands\n\
bool aux_valid		# Auxiliary commands valid\n\
";
  }

  static const char* value(const ::rosplane_msgs::Controller_Commands_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosplane_msgs::Controller_Commands_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Va_c);
      stream.next(m.h_c);
      stream.next(m.chi_c);
      stream.next(m.phi_ff);
      stream.next(m.aux);
      stream.next(m.aux_valid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Controller_Commands_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosplane_msgs::Controller_Commands_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosplane_msgs::Controller_Commands_<ContainerAllocator>& v)
  {
    s << indent << "Va_c: ";
    Printer<float>::stream(s, indent + "  ", v.Va_c);
    s << indent << "h_c: ";
    Printer<float>::stream(s, indent + "  ", v.h_c);
    s << indent << "chi_c: ";
    Printer<float>::stream(s, indent + "  ", v.chi_c);
    s << indent << "phi_ff: ";
    Printer<float>::stream(s, indent + "  ", v.phi_ff);
    s << indent << "aux[]" << std::endl;
    for (size_t i = 0; i < v.aux.size(); ++i)
    {
      s << indent << "  aux[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.aux[i]);
    }
    s << indent << "aux_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.aux_valid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSPLANE_MSGS_MESSAGE_CONTROLLER_COMMANDS_H
