// Generated by gencpp from file rosplane_msgs/Waypoint.msg
// DO NOT EDIT!


#ifndef ROSPLANE_MSGS_MESSAGE_WAYPOINT_H
#define ROSPLANE_MSGS_MESSAGE_WAYPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rosplane_msgs
{
template <class ContainerAllocator>
struct Waypoint_
{
  typedef Waypoint_<ContainerAllocator> Type;

  Waypoint_()
    : w()
    , chi_d(0.0)
    , chi_valid(false)
    , Va_d(0.0)
    , set_current(false)
    , clear_wp_list(false)  {
      w.assign(0.0);
  }
  Waypoint_(const ContainerAllocator& _alloc)
    : w()
    , chi_d(0.0)
    , chi_valid(false)
    , Va_d(0.0)
    , set_current(false)
    , clear_wp_list(false)  {
  (void)_alloc;
      w.assign(0.0);
  }



   typedef boost::array<float, 3>  _w_type;
  _w_type w;

   typedef float _chi_d_type;
  _chi_d_type chi_d;

   typedef uint8_t _chi_valid_type;
  _chi_valid_type chi_valid;

   typedef float _Va_d_type;
  _Va_d_type Va_d;

   typedef uint8_t _set_current_type;
  _set_current_type set_current;

   typedef uint8_t _clear_wp_list_type;
  _clear_wp_list_type clear_wp_list;





  typedef boost::shared_ptr< ::rosplane_msgs::Waypoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosplane_msgs::Waypoint_<ContainerAllocator> const> ConstPtr;

}; // struct Waypoint_

typedef ::rosplane_msgs::Waypoint_<std::allocator<void> > Waypoint;

typedef boost::shared_ptr< ::rosplane_msgs::Waypoint > WaypointPtr;
typedef boost::shared_ptr< ::rosplane_msgs::Waypoint const> WaypointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosplane_msgs::Waypoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosplane_msgs::Waypoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rosplane_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'HasHeader': False, 'IsMessage': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'rosplane_msgs': ['/home/yifengn2/catkin_ws3/src/rosplane/rosplane_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rosplane_msgs::Waypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosplane_msgs::Waypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosplane_msgs::Waypoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosplane_msgs::Waypoint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosplane_msgs::Waypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosplane_msgs::Waypoint_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosplane_msgs::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6f0d6b83780495e80e302dd0005e1bee";
  }

  static const char* value(const ::rosplane_msgs::Waypoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6f0d6b83780495e8ULL;
  static const uint64_t static_value2 = 0x0e302dd0005e1beeULL;
};

template<class ContainerAllocator>
struct DataType< ::rosplane_msgs::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosplane_msgs/Waypoint";
  }

  static const char* value(const ::rosplane_msgs::Waypoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosplane_msgs::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# New waypoint, input to path manager\n\
\n\
# @warning w and Va_d always have to be valid; the chi_d is optional.\n\
float32[3] w		# Waypoint in local NED (m)\n\
float32 chi_d		# Desired course at this waypoint (rad)\n\
bool chi_valid		# Desired course valid (dubin or fillet paths)\n\
float32 Va_d		# Desired airspeed (m/s)\n\
bool set_current	# Sets this waypoint to be executed now! Starts a new list\n\
bool clear_wp_list  # Removes all waypoints and returns to origin.  The rest of\n\
                    # this message will be ignored\n\
";
  }

  static const char* value(const ::rosplane_msgs::Waypoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosplane_msgs::Waypoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.w);
      stream.next(m.chi_d);
      stream.next(m.chi_valid);
      stream.next(m.Va_d);
      stream.next(m.set_current);
      stream.next(m.clear_wp_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Waypoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosplane_msgs::Waypoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosplane_msgs::Waypoint_<ContainerAllocator>& v)
  {
    s << indent << "w[]" << std::endl;
    for (size_t i = 0; i < v.w.size(); ++i)
    {
      s << indent << "  w[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.w[i]);
    }
    s << indent << "chi_d: ";
    Printer<float>::stream(s, indent + "  ", v.chi_d);
    s << indent << "chi_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.chi_valid);
    s << indent << "Va_d: ";
    Printer<float>::stream(s, indent + "  ", v.Va_d);
    s << indent << "set_current: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_current);
    s << indent << "clear_wp_list: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.clear_wp_list);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSPLANE_MSGS_MESSAGE_WAYPOINT_H
