// Generated by gencpp from file rosflight_msgs/GNSSFull.msg
// DO NOT EDIT!


#ifndef ROSFLIGHT_MSGS_MESSAGE_GNSSFULL_H
#define ROSFLIGHT_MSGS_MESSAGE_GNSSFULL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace rosflight_msgs
{
template <class ContainerAllocator>
struct GNSSFull_
{
  typedef GNSSFull_<ContainerAllocator> Type;

  GNSSFull_()
    : header()
    , time_of_week(0)
    , year(0)
    , month(0)
    , day(0)
    , hour(0)
    , min(0)
    , sec(0)
    , valid(0)
    , t_acc(0)
    , nano(0)
    , fix_type(0)
    , num_sat(0)
    , lon(0)
    , lat(0)
    , height(0)
    , height_msl(0)
    , h_acc(0)
    , v_acc(0)
    , vel_n(0)
    , vel_e(0)
    , vel_d(0)
    , g_speed(0)
    , head_mot(0)
    , s_acc(0)
    , head_acc(0)
    , p_dop(0)  {
    }
  GNSSFull_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , time_of_week(0)
    , year(0)
    , month(0)
    , day(0)
    , hour(0)
    , min(0)
    , sec(0)
    , valid(0)
    , t_acc(0)
    , nano(0)
    , fix_type(0)
    , num_sat(0)
    , lon(0)
    , lat(0)
    , height(0)
    , height_msl(0)
    , h_acc(0)
    , v_acc(0)
    , vel_n(0)
    , vel_e(0)
    , vel_d(0)
    , g_speed(0)
    , head_mot(0)
    , s_acc(0)
    , head_acc(0)
    , p_dop(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _time_of_week_type;
  _time_of_week_type time_of_week;

   typedef uint16_t _year_type;
  _year_type year;

   typedef uint8_t _month_type;
  _month_type month;

   typedef uint8_t _day_type;
  _day_type day;

   typedef uint8_t _hour_type;
  _hour_type hour;

   typedef uint8_t _min_type;
  _min_type min;

   typedef uint8_t _sec_type;
  _sec_type sec;

   typedef uint8_t _valid_type;
  _valid_type valid;

   typedef uint32_t _t_acc_type;
  _t_acc_type t_acc;

   typedef int32_t _nano_type;
  _nano_type nano;

   typedef uint8_t _fix_type_type;
  _fix_type_type fix_type;

   typedef uint8_t _num_sat_type;
  _num_sat_type num_sat;

   typedef int32_t _lon_type;
  _lon_type lon;

   typedef int32_t _lat_type;
  _lat_type lat;

   typedef int32_t _height_type;
  _height_type height;

   typedef int32_t _height_msl_type;
  _height_msl_type height_msl;

   typedef uint32_t _h_acc_type;
  _h_acc_type h_acc;

   typedef uint32_t _v_acc_type;
  _v_acc_type v_acc;

   typedef int32_t _vel_n_type;
  _vel_n_type vel_n;

   typedef int32_t _vel_e_type;
  _vel_e_type vel_e;

   typedef int32_t _vel_d_type;
  _vel_d_type vel_d;

   typedef int32_t _g_speed_type;
  _g_speed_type g_speed;

   typedef int32_t _head_mot_type;
  _head_mot_type head_mot;

   typedef uint32_t _s_acc_type;
  _s_acc_type s_acc;

   typedef uint32_t _head_acc_type;
  _head_acc_type head_acc;

   typedef uint16_t _p_dop_type;
  _p_dop_type p_dop;





  typedef boost::shared_ptr< ::rosflight_msgs::GNSSFull_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosflight_msgs::GNSSFull_<ContainerAllocator> const> ConstPtr;

}; // struct GNSSFull_

typedef ::rosflight_msgs::GNSSFull_<std::allocator<void> > GNSSFull;

typedef boost::shared_ptr< ::rosflight_msgs::GNSSFull > GNSSFullPtr;
typedef boost::shared_ptr< ::rosflight_msgs::GNSSFull const> GNSSFullConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosflight_msgs::GNSSFull_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosflight_msgs::GNSSFull_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rosflight_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'HasHeader': True, 'IsMessage': True, 'IsFixedSize': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'rosflight_msgs': ['/home/yifengn2/catkin_ws3/src/rosflight/rosflight_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct HasHeader< ::rosflight_msgs::GNSSFull_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosflight_msgs::GNSSFull_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosflight_msgs::GNSSFull_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosflight_msgs::GNSSFull_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosflight_msgs::GNSSFull_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosflight_msgs::GNSSFull_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosflight_msgs::GNSSFull_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ce3697684ed81ea92b68164c6a58e827";
  }

  static const char* value(const ::rosflight_msgs::GNSSFull_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xce3697684ed81ea9ULL;
  static const uint64_t static_value2 = 0x2b68164c6a58e827ULL;
};

template<class ContainerAllocator>
struct DataType< ::rosflight_msgs::GNSSFull_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosflight_msgs/GNSSFull";
  }

  static const char* value(const ::rosflight_msgs::GNSSFull_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosflight_msgs::GNSSFull_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
uint64 time_of_week\n\
uint16 year\n\
uint8 month\n\
uint8 day\n\
uint8 hour\n\
uint8 min\n\
uint8 sec\n\
uint8 valid\n\
uint32 t_acc #ns \n\
int32 nano #ns \n\
uint8 fix_type\n\
uint8 num_sat\n\
int32 lon #deg *10^-7 \n\
int32 lat #deg *10^-7 \n\
int32 height #mm above elipsoid \n\
int32 height_msl #mm above mean sea level \n\
uint32 h_acc #mm \n\
uint32 v_acc #mm \n\
int32 vel_n #mm/s \n\
int32 vel_e #mm/s \n\
int32 vel_d #mm/s \n\
int32 g_speed #mm/s \n\
int32 head_mot #deg *10^-5 \n\
uint32 s_acc #mm/s\n\
uint32 head_acc #deg * 10^-5 \n\
uint16 p_dop #*.01 \n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::rosflight_msgs::GNSSFull_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosflight_msgs::GNSSFull_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.time_of_week);
      stream.next(m.year);
      stream.next(m.month);
      stream.next(m.day);
      stream.next(m.hour);
      stream.next(m.min);
      stream.next(m.sec);
      stream.next(m.valid);
      stream.next(m.t_acc);
      stream.next(m.nano);
      stream.next(m.fix_type);
      stream.next(m.num_sat);
      stream.next(m.lon);
      stream.next(m.lat);
      stream.next(m.height);
      stream.next(m.height_msl);
      stream.next(m.h_acc);
      stream.next(m.v_acc);
      stream.next(m.vel_n);
      stream.next(m.vel_e);
      stream.next(m.vel_d);
      stream.next(m.g_speed);
      stream.next(m.head_mot);
      stream.next(m.s_acc);
      stream.next(m.head_acc);
      stream.next(m.p_dop);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GNSSFull_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosflight_msgs::GNSSFull_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosflight_msgs::GNSSFull_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time_of_week: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.time_of_week);
    s << indent << "year: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.year);
    s << indent << "month: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.month);
    s << indent << "day: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.day);
    s << indent << "hour: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hour);
    s << indent << "min: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.min);
    s << indent << "sec: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sec);
    s << indent << "valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valid);
    s << indent << "t_acc: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.t_acc);
    s << indent << "nano: ";
    Printer<int32_t>::stream(s, indent + "  ", v.nano);
    s << indent << "fix_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fix_type);
    s << indent << "num_sat: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_sat);
    s << indent << "lon: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lon);
    s << indent << "lat: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lat);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
    s << indent << "height_msl: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height_msl);
    s << indent << "h_acc: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.h_acc);
    s << indent << "v_acc: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.v_acc);
    s << indent << "vel_n: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vel_n);
    s << indent << "vel_e: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vel_e);
    s << indent << "vel_d: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vel_d);
    s << indent << "g_speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.g_speed);
    s << indent << "head_mot: ";
    Printer<int32_t>::stream(s, indent + "  ", v.head_mot);
    s << indent << "s_acc: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.s_acc);
    s << indent << "head_acc: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.head_acc);
    s << indent << "p_dop: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.p_dop);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSFLIGHT_MSGS_MESSAGE_GNSSFULL_H
