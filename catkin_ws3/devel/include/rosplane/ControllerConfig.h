//#line 2 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the rosplane package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __rosplane__CONTROLLERCONFIG_H__
#define __rosplane__CONTROLLERCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace rosplane
{
  class ControllerConfigStatics;

  class ControllerConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(ControllerConfig &config, const ControllerConfig &max, const ControllerConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const ControllerConfig &config1, const ControllerConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, ControllerConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const ControllerConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, ControllerConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const ControllerConfig &config) const = 0;
      virtual void getValue(const ControllerConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T ControllerConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (ControllerConfig::* field);

      virtual void clamp(ControllerConfig &config, const ControllerConfig &max, const ControllerConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const ControllerConfig &config1, const ControllerConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, ControllerConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const ControllerConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, ControllerConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const ControllerConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const ControllerConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, ControllerConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, ControllerConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<ControllerConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(ControllerConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    class TRIM
{
  public:
    TRIM()
    {
      state = true;
      name = "Trim";
    }

    void setParams(ControllerConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("TRIM_E"==(*_i)->name){TRIM_E = boost::any_cast<double>(val);}
        if("TRIM_A"==(*_i)->name){TRIM_A = boost::any_cast<double>(val);}
        if("TRIM_R"==(*_i)->name){TRIM_R = boost::any_cast<double>(val);}
        if("TRIM_T"==(*_i)->name){TRIM_T = boost::any_cast<double>(val);}
      }
    }

    double TRIM_E;
double TRIM_A;
double TRIM_R;
double TRIM_T;

    bool state;
    std::string name;

    
}trim;

class COURSE
{
  public:
    COURSE()
    {
      state = true;
      name = "Course";
    }

    void setParams(ControllerConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("COURSE_KP"==(*_i)->name){COURSE_KP = boost::any_cast<double>(val);}
        if("COURSE_KD"==(*_i)->name){COURSE_KD = boost::any_cast<double>(val);}
        if("COURSE_KI"==(*_i)->name){COURSE_KI = boost::any_cast<double>(val);}
      }
    }

    double COURSE_KP;
double COURSE_KD;
double COURSE_KI;

    bool state;
    std::string name;

    
}course;

class ROLL
{
  public:
    ROLL()
    {
      state = true;
      name = "Roll";
    }

    void setParams(ControllerConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("ROLL_KP"==(*_i)->name){ROLL_KP = boost::any_cast<double>(val);}
        if("ROLL_KD"==(*_i)->name){ROLL_KD = boost::any_cast<double>(val);}
        if("ROLL_KI"==(*_i)->name){ROLL_KI = boost::any_cast<double>(val);}
      }
    }

    double ROLL_KP;
double ROLL_KD;
double ROLL_KI;

    bool state;
    std::string name;

    
}roll;

class PITCH
{
  public:
    PITCH()
    {
      state = true;
      name = "Pitch";
    }

    void setParams(ControllerConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("PITCH_KP"==(*_i)->name){PITCH_KP = boost::any_cast<double>(val);}
        if("PITCH_KD"==(*_i)->name){PITCH_KD = boost::any_cast<double>(val);}
        if("PITCH_KI"==(*_i)->name){PITCH_KI = boost::any_cast<double>(val);}
        if("PITCH_FF"==(*_i)->name){PITCH_FF = boost::any_cast<double>(val);}
      }
    }

    double PITCH_KP;
double PITCH_KD;
double PITCH_KI;
double PITCH_FF;

    bool state;
    std::string name;

    
}pitch;

class AIRSPEED_WITH_PITCH
{
  public:
    AIRSPEED_WITH_PITCH()
    {
      state = true;
      name = "Airspeed_with_Pitch";
    }

    void setParams(ControllerConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("AS_PITCH_KP"==(*_i)->name){AS_PITCH_KP = boost::any_cast<double>(val);}
        if("AS_PITCH_KD"==(*_i)->name){AS_PITCH_KD = boost::any_cast<double>(val);}
        if("AS_PITCH_KI"==(*_i)->name){AS_PITCH_KI = boost::any_cast<double>(val);}
      }
    }

    double AS_PITCH_KP;
double AS_PITCH_KD;
double AS_PITCH_KI;

    bool state;
    std::string name;

    
}airspeed_with_pitch;

class AIRSPEED_WITH_THROTTLE
{
  public:
    AIRSPEED_WITH_THROTTLE()
    {
      state = true;
      name = "Airspeed_with_Throttle";
    }

    void setParams(ControllerConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("AS_THR_KP"==(*_i)->name){AS_THR_KP = boost::any_cast<double>(val);}
        if("AS_THR_KD"==(*_i)->name){AS_THR_KD = boost::any_cast<double>(val);}
        if("AS_THR_KI"==(*_i)->name){AS_THR_KI = boost::any_cast<double>(val);}
      }
    }

    double AS_THR_KP;
double AS_THR_KD;
double AS_THR_KI;

    bool state;
    std::string name;

    
}airspeed_with_throttle;

class ALTITUDE
{
  public:
    ALTITUDE()
    {
      state = true;
      name = "Altitude";
    }

    void setParams(ControllerConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("ALT_KP"==(*_i)->name){ALT_KP = boost::any_cast<double>(val);}
        if("ALT_KD"==(*_i)->name){ALT_KD = boost::any_cast<double>(val);}
        if("ALT_KI"==(*_i)->name){ALT_KI = boost::any_cast<double>(val);}
      }
    }

    double ALT_KP;
double ALT_KD;
double ALT_KI;

    bool state;
    std::string name;

    
}altitude;

class SIDE_SLIP
{
  public:
    SIDE_SLIP()
    {
      state = true;
      name = "Side_Slip";
    }

    void setParams(ControllerConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("BETA_KP"==(*_i)->name){BETA_KP = boost::any_cast<double>(val);}
        if("BETA_KD"==(*_i)->name){BETA_KD = boost::any_cast<double>(val);}
        if("BETA_KI"==(*_i)->name){BETA_KI = boost::any_cast<double>(val);}
      }
    }

    double BETA_KP;
double BETA_KD;
double BETA_KI;

    bool state;
    std::string name;

    
}side_slip;

}groups;



//#line 10 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      double TRIM_E;
//#line 11 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      double TRIM_A;
//#line 12 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      double TRIM_R;
//#line 13 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      double TRIM_T;
//#line 17 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      double COURSE_KP;
//#line 18 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      double COURSE_KD;
//#line 19 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      double COURSE_KI;
//#line 23 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      double ROLL_KP;
//#line 24 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      double ROLL_KD;
//#line 25 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      double ROLL_KI;
//#line 29 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      double PITCH_KP;
//#line 30 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      double PITCH_KD;
//#line 31 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      double PITCH_KI;
//#line 32 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      double PITCH_FF;
//#line 36 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      double AS_PITCH_KP;
//#line 37 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      double AS_PITCH_KD;
//#line 38 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      double AS_PITCH_KI;
//#line 42 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      double AS_THR_KP;
//#line 43 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      double AS_THR_KD;
//#line 44 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      double AS_THR_KI;
//#line 48 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      double ALT_KP;
//#line 49 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      double ALT_KD;
//#line 50 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      double ALT_KI;
//#line 54 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      double BETA_KP;
//#line 55 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      double BETA_KD;
//#line 56 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      double BETA_KI;
//#line 228 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("ControllerConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const ControllerConfig &__max__ = __getMax__();
      const ControllerConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const ControllerConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const ControllerConfig &__getDefault__();
    static const ControllerConfig &__getMax__();
    static const ControllerConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const ControllerConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void ControllerConfig::ParamDescription<std::string>::clamp(ControllerConfig &config, const ControllerConfig &max, const ControllerConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class ControllerConfigStatics
  {
    friend class ControllerConfig;

    ControllerConfigStatics()
    {
ControllerConfig::GroupDescription<ControllerConfig::DEFAULT, ControllerConfig> Default("Default", "", 0, 0, true, &ControllerConfig::groups);
ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::TRIM, ControllerConfig::DEFAULT> Trim("Trim", "", 0, 1, true, &ControllerConfig::DEFAULT::trim);
//#line 10 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __min__.TRIM_E = -1.0;
//#line 10 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __max__.TRIM_E = 1.0;
//#line 10 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __default__.TRIM_E = 0.0;
//#line 10 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      Trim.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("TRIM_E", "double", 0, "Elevator trim", "", &ControllerConfig::TRIM_E)));
//#line 10 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("TRIM_E", "double", 0, "Elevator trim", "", &ControllerConfig::TRIM_E)));
//#line 11 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __min__.TRIM_A = -1.0;
//#line 11 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __max__.TRIM_A = 1.0;
//#line 11 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __default__.TRIM_A = 0.0;
//#line 11 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      Trim.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("TRIM_A", "double", 0, "Aileron trim", "", &ControllerConfig::TRIM_A)));
//#line 11 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("TRIM_A", "double", 0, "Aileron trim", "", &ControllerConfig::TRIM_A)));
//#line 12 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __min__.TRIM_R = -1.0;
//#line 12 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __max__.TRIM_R = 1.0;
//#line 12 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __default__.TRIM_R = 0.0;
//#line 12 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      Trim.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("TRIM_R", "double", 0, "Rudder trim", "", &ControllerConfig::TRIM_R)));
//#line 12 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("TRIM_R", "double", 0, "Rudder trim", "", &ControllerConfig::TRIM_R)));
//#line 13 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __min__.TRIM_T = 0.0;
//#line 13 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __max__.TRIM_T = 1.0;
//#line 13 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __default__.TRIM_T = 0.6;
//#line 13 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      Trim.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("TRIM_T", "double", 0, "Throttle trim", "", &ControllerConfig::TRIM_T)));
//#line 13 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("TRIM_T", "double", 0, "Throttle trim", "", &ControllerConfig::TRIM_T)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Trim.convertParams();
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::TRIM, ControllerConfig::DEFAULT>(Trim)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::TRIM, ControllerConfig::DEFAULT>(Trim)));
ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::COURSE, ControllerConfig::DEFAULT> Course("Course", "", 0, 2, true, &ControllerConfig::DEFAULT::course);
//#line 17 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __min__.COURSE_KP = 0.0;
//#line 17 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __max__.COURSE_KP = 2.0;
//#line 17 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __default__.COURSE_KP = 0.7329;
//#line 17 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      Course.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("COURSE_KP", "double", 0, "Course proportional gain", "", &ControllerConfig::COURSE_KP)));
//#line 17 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("COURSE_KP", "double", 0, "Course proportional gain", "", &ControllerConfig::COURSE_KP)));
//#line 18 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __min__.COURSE_KD = -1.0;
//#line 18 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __max__.COURSE_KD = 0.0;
//#line 18 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __default__.COURSE_KD = 0.0;
//#line 18 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      Course.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("COURSE_KD", "double", 0, "Course derivative gain", "", &ControllerConfig::COURSE_KD)));
//#line 18 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("COURSE_KD", "double", 0, "Course derivative gain", "", &ControllerConfig::COURSE_KD)));
//#line 19 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __min__.COURSE_KI = 0.0;
//#line 19 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __max__.COURSE_KI = 0.2;
//#line 19 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __default__.COURSE_KI = 0.0;
//#line 19 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      Course.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("COURSE_KI", "double", 0, "Course integral gain", "", &ControllerConfig::COURSE_KI)));
//#line 19 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("COURSE_KI", "double", 0, "Course integral gain", "", &ControllerConfig::COURSE_KI)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Course.convertParams();
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::COURSE, ControllerConfig::DEFAULT>(Course)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::COURSE, ControllerConfig::DEFAULT>(Course)));
ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::ROLL, ControllerConfig::DEFAULT> Roll("Roll", "", 0, 3, true, &ControllerConfig::DEFAULT::roll);
//#line 23 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __min__.ROLL_KP = 0.0;
//#line 23 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __max__.ROLL_KP = 3.0;
//#line 23 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __default__.ROLL_KP = 1.17;
//#line 23 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      Roll.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("ROLL_KP", "double", 0, "Roll proportional gain", "", &ControllerConfig::ROLL_KP)));
//#line 23 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("ROLL_KP", "double", 0, "Roll proportional gain", "", &ControllerConfig::ROLL_KP)));
//#line 24 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __min__.ROLL_KD = -1.0;
//#line 24 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __max__.ROLL_KD = 0.0;
//#line 24 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __default__.ROLL_KD = -0.13;
//#line 24 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      Roll.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("ROLL_KD", "double", 0, "Roll derivative gain", "", &ControllerConfig::ROLL_KD)));
//#line 24 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("ROLL_KD", "double", 0, "Roll derivative gain", "", &ControllerConfig::ROLL_KD)));
//#line 25 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __min__.ROLL_KI = 0.0;
//#line 25 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __max__.ROLL_KI = 0.2;
//#line 25 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __default__.ROLL_KI = 0.0;
//#line 25 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      Roll.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("ROLL_KI", "double", 0, "Roll integral gain", "", &ControllerConfig::ROLL_KI)));
//#line 25 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("ROLL_KI", "double", 0, "Roll integral gain", "", &ControllerConfig::ROLL_KI)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Roll.convertParams();
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::ROLL, ControllerConfig::DEFAULT>(Roll)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::ROLL, ControllerConfig::DEFAULT>(Roll)));
ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::PITCH, ControllerConfig::DEFAULT> Pitch("Pitch", "", 0, 4, true, &ControllerConfig::DEFAULT::pitch);
//#line 29 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __min__.PITCH_KP = 0.0;
//#line 29 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __max__.PITCH_KP = 3.0;
//#line 29 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __default__.PITCH_KP = 1.0;
//#line 29 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      Pitch.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("PITCH_KP", "double", 0, "Pitch proportional gain", "", &ControllerConfig::PITCH_KP)));
//#line 29 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("PITCH_KP", "double", 0, "Pitch proportional gain", "", &ControllerConfig::PITCH_KP)));
//#line 30 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __min__.PITCH_KD = -0.4;
//#line 30 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __max__.PITCH_KD = 0.0;
//#line 30 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __default__.PITCH_KD = -0.17;
//#line 30 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      Pitch.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("PITCH_KD", "double", 0, "Pitch derivative gain", "", &ControllerConfig::PITCH_KD)));
//#line 30 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("PITCH_KD", "double", 0, "Pitch derivative gain", "", &ControllerConfig::PITCH_KD)));
//#line 31 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __min__.PITCH_KI = 0.0;
//#line 31 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __max__.PITCH_KI = 0.2;
//#line 31 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __default__.PITCH_KI = 0.0;
//#line 31 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      Pitch.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("PITCH_KI", "double", 0, "Pitch integral gain", "", &ControllerConfig::PITCH_KI)));
//#line 31 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("PITCH_KI", "double", 0, "Pitch integral gain", "", &ControllerConfig::PITCH_KI)));
//#line 32 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __min__.PITCH_FF = -1.0;
//#line 32 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __max__.PITCH_FF = 1.0;
//#line 32 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __default__.PITCH_FF = 0.0;
//#line 32 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      Pitch.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("PITCH_FF", "double", 0, "Pitch feed forward value", "", &ControllerConfig::PITCH_FF)));
//#line 32 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("PITCH_FF", "double", 0, "Pitch feed forward value", "", &ControllerConfig::PITCH_FF)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Pitch.convertParams();
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::PITCH, ControllerConfig::DEFAULT>(Pitch)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::PITCH, ControllerConfig::DEFAULT>(Pitch)));
ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::AIRSPEED_WITH_PITCH, ControllerConfig::DEFAULT> Airspeed_with_Pitch("Airspeed_with_Pitch", "", 0, 5, true, &ControllerConfig::DEFAULT::airspeed_with_pitch);
//#line 36 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __min__.AS_PITCH_KP = 0.0;
//#line 36 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __max__.AS_PITCH_KP = 0.2;
//#line 36 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __default__.AS_PITCH_KP = -0.0713;
//#line 36 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      Airspeed_with_Pitch.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("AS_PITCH_KP", "double", 0, "Airspeed with pitch proportional gain", "", &ControllerConfig::AS_PITCH_KP)));
//#line 36 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("AS_PITCH_KP", "double", 0, "Airspeed with pitch proportional gain", "", &ControllerConfig::AS_PITCH_KP)));
//#line 37 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __min__.AS_PITCH_KD = -0.2;
//#line 37 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __max__.AS_PITCH_KD = 0.0;
//#line 37 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __default__.AS_PITCH_KD = -0.0635;
//#line 37 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      Airspeed_with_Pitch.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("AS_PITCH_KD", "double", 0, "Airspeed with pitch derivative gain", "", &ControllerConfig::AS_PITCH_KD)));
//#line 37 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("AS_PITCH_KD", "double", 0, "Airspeed with pitch derivative gain", "", &ControllerConfig::AS_PITCH_KD)));
//#line 38 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __min__.AS_PITCH_KI = 0.0;
//#line 38 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __max__.AS_PITCH_KI = 0.2;
//#line 38 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __default__.AS_PITCH_KI = 0.0;
//#line 38 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      Airspeed_with_Pitch.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("AS_PITCH_KI", "double", 0, "Airspeed with pitch integral gain", "", &ControllerConfig::AS_PITCH_KI)));
//#line 38 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("AS_PITCH_KI", "double", 0, "Airspeed with pitch integral gain", "", &ControllerConfig::AS_PITCH_KI)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Airspeed_with_Pitch.convertParams();
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::AIRSPEED_WITH_PITCH, ControllerConfig::DEFAULT>(Airspeed_with_Pitch)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::AIRSPEED_WITH_PITCH, ControllerConfig::DEFAULT>(Airspeed_with_Pitch)));
ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::AIRSPEED_WITH_THROTTLE, ControllerConfig::DEFAULT> Airspeed_with_Throttle("Airspeed_with_Throttle", "", 0, 6, true, &ControllerConfig::DEFAULT::airspeed_with_throttle);
//#line 42 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __min__.AS_THR_KP = 0.0;
//#line 42 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __max__.AS_THR_KP = 10.0;
//#line 42 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __default__.AS_THR_KP = 3.2;
//#line 42 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      Airspeed_with_Throttle.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("AS_THR_KP", "double", 0, "Airspeed with throttle proportional gain", "", &ControllerConfig::AS_THR_KP)));
//#line 42 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("AS_THR_KP", "double", 0, "Airspeed with throttle proportional gain", "", &ControllerConfig::AS_THR_KP)));
//#line 43 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __min__.AS_THR_KD = -5.0;
//#line 43 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __max__.AS_THR_KD = 0.0;
//#line 43 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __default__.AS_THR_KD = 0.0;
//#line 43 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      Airspeed_with_Throttle.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("AS_THR_KD", "double", 0, "Airspeed with throttle derivative gain", "", &ControllerConfig::AS_THR_KD)));
//#line 43 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("AS_THR_KD", "double", 0, "Airspeed with throttle derivative gain", "", &ControllerConfig::AS_THR_KD)));
//#line 44 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __min__.AS_THR_KI = 0.0;
//#line 44 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __max__.AS_THR_KI = 10.0;
//#line 44 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __default__.AS_THR_KI = 1.0;
//#line 44 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      Airspeed_with_Throttle.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("AS_THR_KI", "double", 0, "Airspeed with throttle integral gain", "", &ControllerConfig::AS_THR_KI)));
//#line 44 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("AS_THR_KI", "double", 0, "Airspeed with throttle integral gain", "", &ControllerConfig::AS_THR_KI)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Airspeed_with_Throttle.convertParams();
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::AIRSPEED_WITH_THROTTLE, ControllerConfig::DEFAULT>(Airspeed_with_Throttle)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::AIRSPEED_WITH_THROTTLE, ControllerConfig::DEFAULT>(Airspeed_with_Throttle)));
ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::ALTITUDE, ControllerConfig::DEFAULT> Altitude("Altitude", "", 0, 7, true, &ControllerConfig::DEFAULT::altitude);
//#line 48 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __min__.ALT_KP = 0.0;
//#line 48 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __max__.ALT_KP = 0.1;
//#line 48 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __default__.ALT_KP = 0.045;
//#line 48 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      Altitude.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("ALT_KP", "double", 0, "Altitude proportional gain", "", &ControllerConfig::ALT_KP)));
//#line 48 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("ALT_KP", "double", 0, "Altitude proportional gain", "", &ControllerConfig::ALT_KP)));
//#line 49 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __min__.ALT_KD = -0.05;
//#line 49 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __max__.ALT_KD = 0.0;
//#line 49 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __default__.ALT_KD = 0.0;
//#line 49 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      Altitude.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("ALT_KD", "double", 0, "Altitude derivative gain", "", &ControllerConfig::ALT_KD)));
//#line 49 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("ALT_KD", "double", 0, "Altitude derivative gain", "", &ControllerConfig::ALT_KD)));
//#line 50 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __min__.ALT_KI = 0.0;
//#line 50 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __max__.ALT_KI = 0.05;
//#line 50 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __default__.ALT_KI = 0.01;
//#line 50 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      Altitude.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("ALT_KI", "double", 0, "Altitude integral gain", "", &ControllerConfig::ALT_KI)));
//#line 50 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("ALT_KI", "double", 0, "Altitude integral gain", "", &ControllerConfig::ALT_KI)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Altitude.convertParams();
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::ALTITUDE, ControllerConfig::DEFAULT>(Altitude)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::ALTITUDE, ControllerConfig::DEFAULT>(Altitude)));
ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::SIDE_SLIP, ControllerConfig::DEFAULT> Side_Slip("Side_Slip", "", 0, 8, true, &ControllerConfig::DEFAULT::side_slip);
//#line 54 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __min__.BETA_KP = 0.0;
//#line 54 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __max__.BETA_KP = 0.3;
//#line 54 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __default__.BETA_KP = -0.1164;
//#line 54 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      Side_Slip.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("BETA_KP", "double", 0, "Side slip proportional gain", "", &ControllerConfig::BETA_KP)));
//#line 54 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("BETA_KP", "double", 0, "Side slip proportional gain", "", &ControllerConfig::BETA_KP)));
//#line 55 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __min__.BETA_KD = -0.15;
//#line 55 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __max__.BETA_KD = 0.0;
//#line 55 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __default__.BETA_KD = 0.0;
//#line 55 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      Side_Slip.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("BETA_KD", "double", 0, "Side slip derivative gain", "", &ControllerConfig::BETA_KD)));
//#line 55 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("BETA_KD", "double", 0, "Side slip derivative gain", "", &ControllerConfig::BETA_KD)));
//#line 56 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __min__.BETA_KI = 0.0;
//#line 56 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __max__.BETA_KI = 0.05;
//#line 56 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __default__.BETA_KI = -0.0037111;
//#line 56 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      Side_Slip.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("BETA_KI", "double", 0, "Side slip integral gain", "", &ControllerConfig::BETA_KI)));
//#line 56 "/home/yifengn2/catkin_ws3/src/rosplane/rosplane/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("BETA_KI", "double", 0, "Side slip integral gain", "", &ControllerConfig::BETA_KI)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Side_Slip.convertParams();
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::SIDE_SLIP, ControllerConfig::DEFAULT>(Side_Slip)));
//#line 124 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::SIDE_SLIP, ControllerConfig::DEFAULT>(Side_Slip)));
//#line 245 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 245 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT, ControllerConfig>(Default)));
//#line 366 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<ControllerConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<ControllerConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<ControllerConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    ControllerConfig __max__;
    ControllerConfig __min__;
    ControllerConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const ControllerConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static ControllerConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &ControllerConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const ControllerConfig &ControllerConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const ControllerConfig &ControllerConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const ControllerConfig &ControllerConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<ControllerConfig::AbstractParamDescriptionConstPtr> &ControllerConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<ControllerConfig::AbstractGroupDescriptionConstPtr> &ControllerConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const ControllerConfigStatics *ControllerConfig::__get_statics__()
  {
    const static ControllerConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = ControllerConfigStatics::get_instance();

    return statics;
  }


}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __CONTROLLERRECONFIGURATOR_H__
