// Generated by gencpp from file cym_marker/Material.msg
// DO NOT EDIT!


#ifndef CYM_MARKER_MESSAGE_MATERIAL_H
#define CYM_MARKER_MESSAGE_MATERIAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <cym_marker/Script.h>
#include <std_msgs/ColorRGBA.h>
#include <std_msgs/ColorRGBA.h>
#include <std_msgs/ColorRGBA.h>
#include <std_msgs/ColorRGBA.h>

namespace cym_marker
{
template <class ContainerAllocator>
struct Material_
{
  typedef Material_<ContainerAllocator> Type;

  Material_()
    : header()
    , script()
    , shader_type(0)
    , normal_map()
    , ambient()
    , diffuse()
    , specular()
    , emissive()
    , lighting(false)  {
    }
  Material_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , script(_alloc)
    , shader_type(0)
    , normal_map(_alloc)
    , ambient(_alloc)
    , diffuse(_alloc)
    , specular(_alloc)
    , emissive(_alloc)
    , lighting(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::cym_marker::Script_<ContainerAllocator>  _script_type;
  _script_type script;

   typedef uint8_t _shader_type_type;
  _shader_type_type shader_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _normal_map_type;
  _normal_map_type normal_map;

   typedef  ::std_msgs::ColorRGBA_<ContainerAllocator>  _ambient_type;
  _ambient_type ambient;

   typedef  ::std_msgs::ColorRGBA_<ContainerAllocator>  _diffuse_type;
  _diffuse_type diffuse;

   typedef  ::std_msgs::ColorRGBA_<ContainerAllocator>  _specular_type;
  _specular_type specular;

   typedef  ::std_msgs::ColorRGBA_<ContainerAllocator>  _emissive_type;
  _emissive_type emissive;

   typedef uint8_t _lighting_type;
  _lighting_type lighting;



  enum {
    VERTEX = 1u,
    PIXEL = 2u,
    NORMAL_MAP_OBJECT_SPACE = 3u,
    NORMAL_MAP_TANGENT_SPACE = 4u,
  };


  typedef boost::shared_ptr< ::cym_marker::Material_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cym_marker::Material_<ContainerAllocator> const> ConstPtr;

}; // struct Material_

typedef ::cym_marker::Material_<std::allocator<void> > Material;

typedef boost::shared_ptr< ::cym_marker::Material > MaterialPtr;
typedef boost::shared_ptr< ::cym_marker::Material const> MaterialConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cym_marker::Material_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cym_marker::Material_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cym_marker

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'HasHeader': True, 'IsMessage': True, 'IsFixedSize': False}
// {'rosgraph_msgs': ['/opt/ros/kinetic/share/rosgraph_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'cym_marker': ['/home/yifengn2/catkin_ws3/src/Cymulator/cym_marker/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct HasHeader< ::cym_marker::Material_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cym_marker::Material_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cym_marker::Material_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cym_marker::Material_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cym_marker::Material_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cym_marker::Material_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cym_marker::Material_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4e6e1fb329ac39780f5143c43155bc26";
  }

  static const char* value(const ::cym_marker::Material_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4e6e1fb329ac3978ULL;
  static const uint64_t static_value2 = 0x0f5143c43155bc26ULL;
};

template<class ContainerAllocator>
struct DataType< ::cym_marker::Material_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cym_marker/Material";
  }

  static const char* value(const ::cym_marker::Material_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cym_marker::Material_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Material shader type\n\
uint8 VERTEX=1\n\
uint8 PIXEL=2\n\
uint8 NORMAL_MAP_OBJECT_SPACE=3\n\
uint8 NORMAL_MAP_TANGENT_SPACE=4\n\
\n\
Header header\n\
\n\
Script script\n\
uint8 shader_type\n\
string normal_map\n\
std_msgs/ColorRGBA ambient\n\
std_msgs/ColorRGBA diffuse\n\
std_msgs/ColorRGBA specular\n\
std_msgs/ColorRGBA emissive\n\
bool lighting\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: cym_marker/Script\n\
string[] uri\n\
string name\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/ColorRGBA\n\
float32 r\n\
float32 g\n\
float32 b\n\
float32 a\n\
";
  }

  static const char* value(const ::cym_marker::Material_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cym_marker::Material_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.script);
      stream.next(m.shader_type);
      stream.next(m.normal_map);
      stream.next(m.ambient);
      stream.next(m.diffuse);
      stream.next(m.specular);
      stream.next(m.emissive);
      stream.next(m.lighting);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Material_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cym_marker::Material_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cym_marker::Material_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "script: ";
    s << std::endl;
    Printer< ::cym_marker::Script_<ContainerAllocator> >::stream(s, indent + "  ", v.script);
    s << indent << "shader_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.shader_type);
    s << indent << "normal_map: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.normal_map);
    s << indent << "ambient: ";
    s << std::endl;
    Printer< ::std_msgs::ColorRGBA_<ContainerAllocator> >::stream(s, indent + "  ", v.ambient);
    s << indent << "diffuse: ";
    s << std::endl;
    Printer< ::std_msgs::ColorRGBA_<ContainerAllocator> >::stream(s, indent + "  ", v.diffuse);
    s << indent << "specular: ";
    s << std::endl;
    Printer< ::std_msgs::ColorRGBA_<ContainerAllocator> >::stream(s, indent + "  ", v.specular);
    s << indent << "emissive: ";
    s << std::endl;
    Printer< ::std_msgs::ColorRGBA_<ContainerAllocator> >::stream(s, indent + "  ", v.emissive);
    s << indent << "lighting: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lighting);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CYM_MARKER_MESSAGE_MATERIAL_H
